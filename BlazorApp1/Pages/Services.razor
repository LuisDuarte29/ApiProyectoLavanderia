@page "/services"
@inject NotificationService notificationService
@inject HttpClient client
@inject NavigationManager navigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<h3>Services</h3>

<h1>Hello Radzen!</h1>
@if (response == null || !response.Any())
{
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" class="rz-m-12" Gap="2rem">

        <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
            <Template>Espere..</Template>
        </RadzenProgressBarCircular>

    </RadzenStack>
}
else
{
    <RadzenDataGrid Style="padding-bottom:200px" TItem="Service" Data="@response" AllowFiltering="true" FilterMode="FilterMode.Simple" EmptyText="No existe datos"
    GridLines="DataGridGridLines.Horizontal" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
        <Columns>
            <RadzenDataGridColumn Width="100px" TItem="Service" Property="ServiceId" Title="ServiceId"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Service" Property="ServiceName" Title="ServiceName"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Service" Property="Description" Title="Description"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Service" Property="Price" Title="Price" FormatString="{0:C}"></RadzenDataGridColumn>
            <RadzenStack>
                <RadzenDataGridColumn Width="100px" TItem="Service" Title="Delete">
                    <Template Context="servicio">
                        <RadzenButton  Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium"
                        Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteServicio(servicio.ServiceId))"
                        @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn  Width="100px" TItem="Service" Title="Edit">
                    <Template Context="servicio">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Flat" Size="ButtonSize.Medium"
                        Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => UpdateService(servicio.ServiceId))"
                        @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </RadzenStack>

        </Columns>
    </RadzenDataGrid>

}

@code{

    public List<Service> response { get; set; } = new();
    public string messagge { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await GetServicio();
    }
    public async Task GetServicio()
    {
        try
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (!string.IsNullOrEmpty(token))
            {
                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer",token);
                response = await client.GetFromJsonAsync<List<Service>>("api/service") ?? new List<Service>();
            }
         
        }
        catch(Exception ex)
        {
            messagge = "Ocurrio un error al intentar recibir el service";
        }
        StateHasChanged();

    }
    public async Task DeleteServicio(long id)
    {
        try
        {
            var result = await client.DeleteAsync($"api/service/{id}");

            if (result.IsSuccessStatusCode) // Verifica que la eliminación fue exitosa
            {
                response.RemoveAll(s => s.ServiceId == id);
                StateHasChanged();
            }
            else
            {
                messagge = "No se pudo eliminar el servicio. Intente nuevamente.";
            }
        }
        catch (Exception ex)
        {
            messagge = $"Ocurrió un error al intentar eliminar el servicio: {ex.Message}";
        }

    }

    public async Task UpdateService(long idServicio)
    {
        try
        {
            navigationManager.NavigateTo($"/servicesCreacion/{idServicio}");
        }
        catch
        {
            messagge = "Ocurrio un error al intentar redirigir el service";
        }
    }

    public  class Service
    {
        public long ServiceId { get; set; }

        public string? ServiceName { get; set; }

        public string? Description { get; set; }

        public decimal? Price { get; set; }
    }


   
}

