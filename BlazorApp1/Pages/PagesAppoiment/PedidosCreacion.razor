@page "/pedidoscreacion"
@layout MainLayout
@inject NotificationService notificationService
@inject HttpClient client
@inject NavigationManager navigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>Pedidos Creación</h3>
<style>
    .search-container {
        max-width: 500px;
        margin: 20px auto;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .search-input {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        font-size: 16px;
        transition: all 0.3s ease;
        box-sizing: border-box;
    }

        .search-input:focus {
            outline: none;
            border-color: #2196F3;
            box-shadow: 0 0 8px rgba(33, 150, 243, 0.2);
        }

        .search-input::placeholder {
            color: #9e9e9e;
        }

    .options-list {
        list-style: none;
        padding: 0;
        margin: 0;
        border: 2px solid #f5f5f5;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        max-height: 300px;
    }

    .list-item {
        padding: 12px 20px;
        cursor: pointer;
        transition: all 0.2s ease;
        border-bottom: 1px solid #eee;
        color: #424242;
    }

        .list-item:last-child {
            border-bottom: none;
        }

        .list-item:hover {
            background-color: #f8f9fa;
            transform: translateX(4px);
        }

        .list-item:active {
            background-color: #e3f2fd;
        }
</style>
<EditForm Model="this">
    <InputSelect @bind-Value="SelectedId">
        <option value="">--Seleccione--</option>
        @foreach (var item in response)
        {
            <option value="@item.ServiceId">@item.ServiceName</option>
        }
    </InputSelect>
</EditForm>

<h3>Autocomplete en Blazor</h3>

<div class="search-container">
    <InputText @bind-Value="SearchTerm" 
        @oninput="FiltrarOpciones" 
        placeholder="Escribe para buscar..."
        class="search-input"
    ></InputText>

    <ul class="options-list">
        @foreach (var item in OpcionesFiltradas)
        {
            <li 
                @onclick="() => SeleccionarOpcion(item)"
                class="list-item"
            >
                @item.ServiceName
            </li>
        }
    </ul>
</div>


@code {
    private string SelectedId { get; set; }
    public string token { get; set; }
    public List<Service> response { get; set; } = new();
    public string messagge { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await GetServicio();

    }
     public async Task GetServicio()
    {
        try
        {
            token = await localStorage.GetItemAsync<string>("token");

            if (!string.IsNullOrEmpty(token))
            {
                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer",token);
                response = await client.GetFromJsonAsync<List<Service>>("api/service") ?? new List<Service>();
            }

        }
        catch(Exception ex)
        {
            messagge = "Ocurrio un error al intentar recibir el service";
        }
        StateHasChanged();

    }
    private string SearchTerm = "";
    private List<Service> OpcionesFiltradas = new();

    public class Opcion
    {
        public string value { get; set; }
        public string nombre { get; set; }
    }

    private void FiltrarOpciones(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? "" ;
        OpcionesFiltradas = response
            .Where(o => o.ServiceName.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void SeleccionarOpcion(Service opcion)
    {
        SearchTerm = opcion.ServiceName;
        OpcionesFiltradas.Clear(); // Oculta la lista al seleccionar
    }
}
