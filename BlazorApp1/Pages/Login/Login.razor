@page "/"
@layout LayoutVacio
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http
@inject NotificationService notificationService

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-lg p-4 rounded" style="max-width: 400px; width: 100%;">
        <div class="card-body">
            <h3 class="text-center mb-4">Iniciar Sesión</h3>

            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="mb-3">
                    <label for="email" class="form-label">Correo Electrónico</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-envelope"></i></span>
                        <InputText id="email" class="form-control" @bind-Value="loginModel.correo" />
                    </div>
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Contraseña</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-lock"></i></span>
                        <InputText id="password" class="form-control" @bind-Value="loginModel.clave" type="password" />
                    </div>
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-primary btn-lg">Iniciar sesión</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
     
    private UsuarioLogin loginModel = new UsuarioLogin();

    private async Task HandleLogin()
    {
        if (!string.IsNullOrEmpty(loginModel.correo) && !string.IsNullOrEmpty(loginModel.clave))
        {
            await localStorage.RemoveItemAsync("token");
            // Aquí puedes realizar una petición al backend para verificar las credenciales
            var response = await Http.PostAsJsonAsync("api/Autenticacion", loginModel);

            if (response.IsSuccessStatusCode)
            {
                TokenResponse token = await response.Content.ReadFromJsonAsync<TokenResponse>();

                // Guarda el usuario en el localStorage si el login es exitoso
                await localStorage.SetItemAsync("token", token.token);

                // Redirige a otra página después de un login exitoso
                Navigation.NavigateTo("/services");
            }
            else
            {
                MostrarAlerta(response);

            }
        }
    }
    
    private void MostrarAlerta(HttpResponseMessage response)
    {
        notificationService.Notify(
    new NotificationMessage
                  {
                      Severity = NotificationSeverity.Error,
                      SummaryContent = ns => @<RadzenText TextStyle="TextStyle.H6" Style="white-space: normal; word-wrap: break-word;">
       Error: <br /> @DateTime.Now
    </RadzenText>
    ,
            Duration = 10000,
            Detail = response.Content.ToString(), // Mostrar todo el mensaje
        }
    );
    }




}
